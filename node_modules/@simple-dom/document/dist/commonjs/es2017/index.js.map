{"version":3,"file":"index.js","sources":["../../../src/node.ts","../../../src/element.ts","../../../src/document-fragment.ts","../../../src/comment.ts","../../../src/raw-html-section.ts","../../../src/text.ts","../../../src/document.ts"],"sourcesContent":["import {\n  SimpleChildNodes, SimpleNode, SimpleNodeType } from '@simple-dom/interface';\n\nexport default abstract class Node implements SimpleNode {\n  public abstract readonly nodeType: SimpleNodeType;\n\n  public parentNode: SimpleNode | null = null;\n  public previousSibling: SimpleNode | null = null;\n  public nextSibling: SimpleNode | null = null;\n  public firstChild: SimpleNode | null = null;\n  public lastChild: SimpleNode | null = null;\n\n  private _childNodes: ChildNodes | undefined = undefined;\n\n  constructor(public readonly nodeName: string, public nodeValue: string | null) {\n  }\n\n  public get childNodes(): SimpleChildNodes {\n    let children = this._childNodes;\n    if (children === undefined) {\n      children = this._childNodes = new ChildNodes(this);\n    }\n    return children as SimpleChildNodes;\n  }\n\n  public cloneNode(deep?: boolean): SimpleNode {\n    const node = this._cloneNode();\n\n    if (deep === true) {\n      let child = this.firstChild;\n      let nextChild = child;\n\n      while (child !== null) {\n        nextChild = child.nextSibling;\n        node.appendChild(child.cloneNode(true));\n        child = nextChild;\n      }\n    }\n\n    return node;\n  }\n\n  public appendChild<T extends SimpleNode>(newChild: T): T {\n    if (newChild.nodeType === SimpleNodeType.DOCUMENT_FRAGMENT_NODE) {\n      insertFragment(newChild, this, this.lastChild, null);\n      return newChild;\n    }\n\n    if (newChild.parentNode) { newChild.parentNode.removeChild(newChild); }\n\n    newChild.parentNode = this;\n    const refNode = this.lastChild;\n    if (refNode === null) {\n      this.firstChild = newChild;\n      this.lastChild = newChild;\n    } else {\n      newChild.previousSibling = refNode;\n      refNode.nextSibling = newChild;\n      this.lastChild = newChild;\n    }\n\n    return newChild;\n  }\n\n  public insertBefore<T extends SimpleNode>(newChild: T, refChild: SimpleNode | null): T {\n    if (refChild == null) {\n      return this.appendChild(newChild);\n    }\n\n    if (newChild.nodeType === SimpleNodeType.DOCUMENT_FRAGMENT_NODE) {\n      insertFragment(newChild, this, refChild.previousSibling, refChild);\n      return newChild;\n    }\n\n    if (newChild.parentNode) { newChild.parentNode.removeChild(newChild); }\n\n    newChild.parentNode = this;\n\n    const previousSibling = refChild.previousSibling;\n    if (previousSibling) {\n      previousSibling.nextSibling = newChild;\n      newChild.previousSibling = previousSibling;\n    } else {\n      newChild.previousSibling = null;\n    }\n\n    refChild.previousSibling = newChild;\n    newChild.nextSibling = refChild;\n\n    if (this.firstChild === refChild) {\n      this.firstChild = newChild;\n    }\n\n    return newChild;\n  }\n\n  public removeChild<T extends SimpleNode>(oldChild: T): T {\n    if (this.firstChild === oldChild) {\n      this.firstChild = oldChild.nextSibling;\n    }\n    if (this.lastChild === oldChild) {\n      this.lastChild = oldChild.previousSibling;\n    }\n    if (oldChild.previousSibling) {\n      oldChild.previousSibling.nextSibling = oldChild.nextSibling;\n    }\n    if (oldChild.nextSibling) {\n      oldChild.nextSibling.previousSibling = oldChild.previousSibling;\n    }\n    oldChild.parentNode = null;\n    oldChild.nextSibling = null;\n    oldChild.previousSibling = null;\n    return oldChild;\n  }\n\n  protected abstract _cloneNode(): SimpleNode;\n}\n\nfunction insertFragment(\n  fragment: SimpleNode, newParent: SimpleNode, before: SimpleNode | null, after: SimpleNode | null) {\n  if (!fragment.firstChild) { return; }\n\n  const firstChild = fragment.firstChild;\n  fragment.firstChild = fragment.lastChild = null;\n  let lastChild = firstChild;\n  let node: SimpleNode | null = firstChild;\n\n  firstChild.previousSibling = before;\n  if (before) {\n    before.nextSibling = firstChild;\n  } else {\n    newParent.firstChild = firstChild;\n  }\n\n  while (node) {\n    node.parentNode = newParent;\n    lastChild = node;\n    node = node.nextSibling;\n  }\n\n  lastChild.nextSibling = after;\n  if (after) {\n    after.previousSibling = lastChild;\n  } else {\n    newParent.lastChild = lastChild;\n  }\n}\n\nclass ChildNodes {\n  constructor(private node: SimpleNode) {\n  }\n\n  public item(index: number) {\n    let child = this.node.firstChild;\n\n    for (let i = 0; child && index !== i; i++) {\n      child = child.nextSibling;\n    }\n\n    return child;\n  }\n}\n","import { SimpleAttr, SimpleElement, SimpleNodeType } from '@simple-dom/interface';\nimport Node from './node';\n\nexport default class Element extends Node implements SimpleElement {\n  public nodeType: SimpleNodeType.ELEMENT_NODE = SimpleNodeType.ELEMENT_NODE;\n  public attributes: SimpleAttr[] = [];\n\n  constructor(tagName: string) {\n    super(tagName.toUpperCase(), null);\n  }\n\n  public get tagName(): string {\n    return this.nodeName;\n  }\n\n  public getAttribute(name: string): string | null {\n    const attributes = this.attributes;\n    const n = name.toLowerCase();\n    let attr;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      attr = attributes[i];\n      if (attr.name === n) {\n        return attr.value;\n      }\n    }\n    return null;\n  }\n\n  public setAttribute(name: string, value: any | undefined | null): void {\n    const attributes = this.attributes;\n    const n = name.toLowerCase();\n    let v: string;\n    if (typeof value === 'string') {\n      v = value;\n    } else {\n      v = '' + value;\n    }\n    let attr;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      attr = attributes[i];\n      if (attr.name === n) {\n        attr.value = v;\n        return;\n      }\n    }\n    attributes.push({\n      name: n,\n      specified: true, // serializer compat with old IE\n      value: v,\n    });\n  }\n\n  public removeAttribute(name: string): void {\n    const n = name.toLowerCase();\n    const attributes = this.attributes;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      const attr = attributes[i];\n      if (attr.name === n) {\n        attributes.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  protected _cloneNode() {\n    const node = new Element(this.tagName);\n\n    const attrs = node.attributes = [] as SimpleAttr[];\n\n    const src = this.attributes;\n\n    for (let i = 0; i < src.length; i++) {\n      const attr = src[i];\n      attrs.push({ name: attr.name, specified: attr.specified, value: attr.value });\n    }\n\n    return node;\n  }\n}\n","import { SimpleDocumentFragment, SimpleNodeType } from '@simple-dom/interface';\nimport Node from './node';\n\nexport default class DocumentFragment extends Node implements SimpleDocumentFragment {\n  public nodeType: SimpleNodeType.DOCUMENT_FRAGMENT_NODE = SimpleNodeType.DOCUMENT_FRAGMENT_NODE;\n\n  constructor() {\n    super('#document-fragment', null);\n  }\n\n  protected _cloneNode() {\n    return new DocumentFragment();\n  }\n}\n","import { SimpleComment, SimpleNodeType } from '@simple-dom/interface';\nimport Node from './node';\n\nexport default class Comment extends Node implements SimpleComment {\n  public nodeType: SimpleNodeType.COMMENT_NODE = SimpleNodeType.COMMENT_NODE;\n\n  constructor(text: string) {\n    super('#comment', text);\n  }\n\n  protected _cloneNode() {\n    return new Comment(this.nodeValue!);\n  }\n}\n","import { SimpleNodeType, SimpleRawHTMLSection } from '@simple-dom/interface';\nimport Node from './node';\n\nexport default class RawHTMLSection extends Node implements SimpleRawHTMLSection {\n  public nodeType: SimpleNodeType.RAW = SimpleNodeType.RAW;\n\n  constructor(text: string) {\n    super('#raw-html-section', text);\n  }\n\n  protected _cloneNode() {\n    return new RawHTMLSection(this.nodeValue!);\n  }\n}\n","import { SimpleNodeType, SimpleText } from '@simple-dom/interface';\nimport Node from './node';\n\nexport default class Text extends Node implements SimpleText {\n  public nodeType: SimpleNodeType.TEXT_NODE = SimpleNodeType.TEXT_NODE;\n\n  constructor(text: string) {\n    super('#text', text);\n  }\n\n  protected _cloneNode(): SimpleText {\n    return new Text(this.nodeValue!);\n  }\n}\n","import {\n  SimpleComment,\n  SimpleDocument,\n  SimpleDocumentFragment,\n  SimpleElement,\n  SimpleNodeType,\n  SimpleRawHTMLSection,\n  SimpleText,\n} from '@simple-dom/interface';\nimport Comment from './comment';\nimport DocumentFragment from './document-fragment';\nimport Element from './element';\nimport Node from './node';\nimport RawHTMLSection from './raw-html-section';\nimport Text from './text';\n\nexport default class Document extends Node implements SimpleDocument {\n  public nodeType: SimpleNodeType.DOCUMENT_NODE = SimpleNodeType.DOCUMENT_NODE;\n  public documentElement: Element;\n  public head: Element;\n  public body: Element;\n\n  constructor() {\n    super('#document', null);\n    this.documentElement = new Element('html');\n    this.head = new Element('head');\n    this.body = new Element('body');\n    this.documentElement.appendChild(this.head);\n    this.documentElement.appendChild(this.body);\n    this.appendChild(this.documentElement);\n  }\n\n  public createElement(tagName: string): SimpleElement {\n    return new Element(tagName);\n  }\n\n  public createTextNode(text: string): SimpleText {\n    return new Text(text);\n  }\n\n  public createComment(text: string): SimpleComment {\n    return new Comment(text);\n  }\n\n  public createRawHTMLSection(text: string): SimpleRawHTMLSection {\n    return new RawHTMLSection(text);\n  }\n\n  public createDocumentFragment(): SimpleDocumentFragment {\n    return new DocumentFragment();\n  }\n\n  protected _cloneNode(): SimpleDocument {\n    return new Document();\n  }\n}\n"],"names":[],"mappings":";;;;;IAcE,YAA4B,QAAgB,EAAS,SAAwB;QAAjD,aAAQ,GAAR,QAAQ,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAe;QARtE,eAAU,GAAsB,IAAI,CAAC;QACrC,oBAAe,GAAsB,IAAI,CAAC;QAC1C,gBAAW,GAAsB,IAAI,CAAC;QACtC,eAAU,GAAsB,IAAI,CAAC;QACrC,cAAS,GAAsB,IAAI,CAAC;QAEnC,gBAAW,GAA2B,SAAS,CAAC;KAGvD;IAED,IAAW,UAAU;QACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAChC,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;SACpD;QACD,OAAO,QAA4B,CAAC;KACrC;IAEM,SAAS,CAAC,IAAc;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAE/B,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;YAC5B,IAAI,SAAS,GAAG,KAAK,CAAC;YAEtB,OAAO,KAAK,KAAK,IAAI,EAAE;gBACrB,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;gBACxC,KAAK,GAAG,SAAS,CAAC;aACnB;SACF;QAED,OAAO,IAAI,CAAC;KACb;IAEM,WAAW,CAAuB,QAAW;QAClD,IAAI,QAAQ,CAAC,QAAQ,sCAA4C;YAC/D,cAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACrD,OAAO,QAAQ,CAAC;SACjB;QAED,IAAI,QAAQ,CAAC,UAAU,EAAE;YAAE,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SAAE;QAEvE,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;QAC/B,IAAI,OAAO,KAAK,IAAI,EAAE;YACpB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;YAC3B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;SAC3B;aAAM;YACL,QAAQ,CAAC,eAAe,GAAG,OAAO,CAAC;YACnC,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;SAC3B;QAED,OAAO,QAAQ,CAAC;KACjB;IAEM,YAAY,CAAuB,QAAW,EAAE,QAA2B;QAChF,IAAI,QAAQ,IAAI,IAAI,EAAE;YACpB,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SACnC;QAED,IAAI,QAAQ,CAAC,QAAQ,sCAA4C;YAC/D,cAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YACnE,OAAO,QAAQ,CAAC;SACjB;QAED,IAAI,QAAQ,CAAC,UAAU,EAAE;YAAE,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SAAE;QAEvE,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;QAE3B,MAAM,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;QACjD,IAAI,eAAe,EAAE;YACnB,eAAe,CAAC,WAAW,GAAG,QAAQ,CAAC;YACvC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;SAC5C;aAAM;YACL,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC;SACjC;QAED,QAAQ,CAAC,eAAe,GAAG,QAAQ,CAAC;QACpC,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC;QAEhC,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;YAChC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;SAC5B;QAED,OAAO,QAAQ,CAAC;KACjB;IAEM,WAAW,CAAuB,QAAW;QAClD,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;YAChC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC;SACxC;QACD,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC;SAC3C;QACD,IAAI,QAAQ,CAAC,eAAe,EAAE;YAC5B,QAAQ,CAAC,eAAe,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;SAC7D;QACD,IAAI,QAAQ,CAAC,WAAW,EAAE;YACxB,QAAQ,CAAC,WAAW,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;SACjE;QACD,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3B,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC;QAChC,OAAO,QAAQ,CAAC;KACjB;CAGF;AAED,wBACE,QAAoB,EAAE,SAAqB,EAAE,MAAyB,EAAE,KAAwB;IAChG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;QAAE,OAAO;KAAE;IAErC,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACvC,QAAQ,CAAC,UAAU,GAAG,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAChD,IAAI,SAAS,GAAG,UAAU,CAAC;IAC3B,IAAI,IAAI,GAAsB,UAAU,CAAC;IAEzC,UAAU,CAAC,eAAe,GAAG,MAAM,CAAC;IACpC,IAAI,MAAM,EAAE;QACV,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;KACjC;SAAM;QACL,SAAS,CAAC,UAAU,GAAG,UAAU,CAAC;KACnC;IAED,OAAO,IAAI,EAAE;QACX,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,SAAS,GAAG,IAAI,CAAC;QACjB,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;KACzB;IAED,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;IAC9B,IAAI,KAAK,EAAE;QACT,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;KACnC;SAAM;QACL,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;KACjC;CACF;AAED;IACE,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;KACnC;IAEM,IAAI,CAAC,KAAa;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QAEjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE;YACzC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC;SAC3B;QAED,OAAO,KAAK,CAAC;KACd;CACF;;aC9J4B,SAAQ,IAAI;IAIvC,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC;QAJ9B,aAAQ,wBAA4D;QACpE,eAAU,GAAiB,EAAE,CAAC;KAIpC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;IAEM,YAAY,CAAC,IAAY;QAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC;QACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACjD,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;SACF;QACD,OAAO,IAAI,CAAC;KACb;IAEM,YAAY,CAAC,IAAY,EAAE,KAA6B;QAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAS,CAAC;QACd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,CAAC,GAAG,KAAK,CAAC;SACX;aAAM;YACL,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;SAChB;QACD,IAAI,IAAI,CAAC;QACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACjD,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gBACf,OAAO;aACR;SACF;QACD,UAAU,CAAC,IAAI,CAAC;YACd,IAAI,EAAE,CAAC;YACP,SAAS,EAAE,IAAI;YACf,KAAK,EAAE,CAAC;SACT,CAAC,CAAC;KACJ;IAEM,eAAe,CAAC,IAAY;QACjC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACjD,MAAM,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnB,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxB,OAAO;aACR;SACF;KACF;IAES,UAAU;QAClB,MAAM,IAAI,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,GAAG,EAAkB,CAAC;QAEnD,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;QAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACpB,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAC/E;QAED,OAAO,IAAI,CAAC;KACb;CACF;;sBC3EqC,SAAQ,IAAI;IAGhD;QACE,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QAH7B,aAAQ,mCAAgF;KAI9F;IAES,UAAU;QAClB,OAAO,IAAI,gBAAgB,EAAE,CAAC;KAC/B;CACF;;aCV4B,SAAQ,IAAI;IAGvC,YAAY,IAAY;QACtB,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAHnB,aAAQ,wBAA4D;KAI1E;IAES,UAAU;QAClB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC;KACrC;CACF;;oBCVmC,SAAQ,IAAI;IAG9C,YAAY,IAAY;QACtB,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAH5B,aAAQ,gBAA0C;KAIxD;IAES,UAAU;QAClB,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC;KAC5C;CACF;;UCVyB,SAAQ,IAAI;IAGpC,YAAY,IAAY;QACtB,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAHhB,aAAQ,qBAAsD;KAIpE;IAES,UAAU;QAClB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC;KAClC;CACF;;cCG6B,SAAQ,IAAI;IAMxC;QACE,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QANpB,aAAQ,yBAA8D;QAO3E,IAAI,CAAC,eAAe,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACxC;IAEM,aAAa,CAAC,OAAe;QAClC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;KAC7B;IAEM,cAAc,CAAC,IAAY;QAChC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;KACvB;IAEM,aAAa,CAAC,IAAY;QAC/B,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;KAC1B;IAEM,oBAAoB,CAAC,IAAY;QACtC,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;KACjC;IAEM,sBAAsB;QAC3B,OAAO,IAAI,gBAAgB,EAAE,CAAC;KAC/B;IAES,UAAU;QAClB,OAAO,IAAI,QAAQ,EAAE,CAAC;KACvB;CACF;;;;;;;"}